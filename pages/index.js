import Head from 'next/head';
import React, { useState, useEffect } from 'react';

import { init, vote, getWinner, getStats } from '../util/getWeb3';

import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Doughnut } from 'react-chartjs-2';

ChartJS.register(ArcElement, Tooltip, Legend);

const colors = [
  'rgba(255, 99, 132, 0.2)',
  'rgba(54, 162, 235, 0.2)',
  'rgba(255, 206, 86, 0.2)',
  'rgba(75, 192, 192, 0.2)',
  'rgba(153, 102, 255, 0.2)',
  'rgba(255, 159, 64, 0.2)',
]

const borderColors = [
  'rgba(255, 99, 132, 1)',
  'rgba(54, 162, 235, 1)',
  'rgba(255, 206, 86, 1)',
  'rgba(75, 192, 192, 1)',
  'rgba(153, 102, 255, 1)',
  'rgba(255, 159, 64, 1)',
]

const dataset = {
  label: '# de Votos',
  data: [],
  backgroundColor: [
    'rgba(255, 99, 132, 0.2)',
    'rgba(54, 162, 235, 0.2)',
    'rgba(255, 206, 86, 0.2)',
  ],
  borderColor: [
    'rgba(255, 99, 132, 1)',
    'rgba(54, 162, 235, 1)',
    'rgba(255, 206, 86, 1)',
  ],
  borderWidth: 1,
};

const Dapp = () => {
  const [state, setState] = useState({ proposal: '', ci: '' })
  const [winner, setWinner] = useState('')
  const [stats, setStats] = useState()

  const getStatsF = () => {
    getStats()
      .then(tx => {
        const labels = tx.map(vote => vote[0])
        const data = tx.map(vote => Number(vote[1]))
        const datasets = [{
          ...dataset,
          data
        }]
        const statsData = {
          labels,
          datasets
        }
        setStats(statsData)
      })
      .catch(err => console.log(err))
  }

  useEffect(() => {
    init()
    getStatsF()
    setInterval(() => {
      getStatsF()
    }, (10 * 1000)); // sec * millsecs
  }, [])

  const giveVote = () => {
    vote(state)
      .then(tx => console.log(tx))
      .catch(err => console.log(err))
  };

  const getWinnerF = () => {
    getWinner()
      .then(tx => {
        console.log(tx)
        setWinner(tx)
      })
      .catch(err => console.log(err))
  };

  const handleSelect = event => {
    setState({
      ...state,
      [event.target.name]: event.target.value
    })
  }

  return (
    <>
      {
        winner &&
        <p>Actual winner: {winner}</p>
      }
      {
        stats &&
        <Doughnut
          data={stats}
        />
      }
      <div className="form-group">
        <label htmlFor="proposal">Candidatos</label>
        <select className="form-control" name="proposal" id="proposal" onChange={handleSelect}>
          <option value=''>Selecciona uno...</option>
          <option value='0'>Candidato 1</option>
          <option value='1'>Candidato 2</option>
          <option value='2'>Candidato 3</option>
        </select>
      </div>

      <div className="form-group">
        <label htmlFor="ci">CI</label>
        <input type="text" className="form-control" name="ci" id="ci" onChange={handleSelect} />
      </div>

      <button type="button" name="vote" id="vote" className="btn btn-primary" onClick={giveVote}>Votar</button>
      <button type="button" name="vote" id="vote" className="btn btn-primary" onClick={getWinnerF}>get winner</button>
      <button type="button" name="vote" id="vote" className="btn btn-primary" onClick={getStatsF}>get stats</button>
    </>
  )
}

export default function Home() {
  return (
    <div className='container'>
      <Head>
        <title>Vote Decentralized App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Dapp />
    </div>
  )
}
